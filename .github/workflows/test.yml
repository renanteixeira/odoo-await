name: Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  # Individual version testing (matrix strategy)
  test-single-version:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        odoo-version: ['12.0', '13.0', '14.0', '15.0', '16.0', '17.0', '18.0', '19.0']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup Docker Buildx and enable caching
      uses: docker/setup-buildx-action@v3

    - name: Start minimal environment for Odoo ${{ matrix.odoo-version }}
      run: |
        version="${{ matrix.odoo-version }}"
        version_num="${version%.*}"
        
        echo "🚀 Starting minimal environment for Odoo ${version}..."
        
        # Start only required services
        docker compose up -d postgres wkhtml
        
        # Wait for PostgreSQL with shorter timeout
        echo "⏳ Waiting for PostgreSQL..."
        timeout 90 bash -c "until docker compose exec postgres pg_isready -U postgres >/dev/null 2>&1; do sleep 2; done"
        
        # Setup database user
        docker compose exec postgres psql -U postgres -c "SELECT 1 FROM pg_roles WHERE rolname='odoo'" | grep -q 1 || {
          docker compose exec postgres psql -U postgres -c "CREATE USER odoo WITH CREATEDB PASSWORD 'odoo';"
        }
        
        # Create database for this version only
        docker compose exec postgres psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "odoo${version_num}" || {
          docker compose exec postgres createdb -U postgres -O odoo odoo${version_num}
        }
        
        # Quick Odoo initialization (base module only)
        timeout 300 docker compose run --rm odoo${version_num} odoo \
          --database=odoo${version_num} \
          --db_user=odoo \
          --db_password=odoo \
          --db_host=postgres \
          --init=base \
          --stop-after-init \
          --without-demo=all
        
        # Start just this version
        docker compose up -d odoo${version_num}

    - name: Wait for Odoo ${{ matrix.odoo-version }} to be ready
      run: |
        version_num="${{ matrix.odoo-version }}"
        version_num="${version_num%.*}"
        port="${version_num}069"
        
        echo "⏳ Waiting for Odoo ${{ matrix.odoo-version }} on port $port..."
        timeout 180 bash -c "until curl -sf http://localhost:$port/web/database/selector >/dev/null; do sleep 3; echo -n '.'; done"
        echo "✅ Odoo ${{ matrix.odoo-version }} is ready!"

    - name: Test Odoo ${{ matrix.odoo-version }}
      timeout-minutes: 10
      run: |
        version_num="${{ matrix.odoo-version }}"
        version_num="${version_num%.*}"
        port="${version_num}069"
        
        echo "🧪 Testing Odoo ${{ matrix.odoo-version }} on port $port"
        ODOO_DB="odoo${version_num}" \
        ODOO_USER="admin" \
        ODOO_PW="admin" \
        ODOO_BASE_URL="http://localhost:${port}" \
        npm test

    - name: Cleanup services
      if: always()
      run: |
        echo "🧹 Cleaning up services for Odoo ${{ matrix.odoo-version }}..."
        docker compose down --volumes --remove-orphans || true

  # Summary job to ensure all versions passed
  test-summary:
    runs-on: ubuntu-latest
    needs: test-single-version
    if: always()
    
    steps:
    - name: Check matrix job results
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Individual version tests completed" >> $GITHUB_STEP_SUMMARY
        echo "📊 Versions tested: 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test-single-version.result }}" == "success" ]]; then
          echo "🎉 All Odoo versions passed testing!" >> $GITHUB_STEP_SUMMARY
          echo "STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Some Odoo versions failed testing" >> $GITHUB_STEP_SUMMARY
          echo "STATUS=failed" >> $GITHUB_ENV
          exit 1
        fi
